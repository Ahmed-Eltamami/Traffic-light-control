
TLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006fe  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000110a  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cd  00000000  00000000  00001a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b60  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00002e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000728  00000000  00000000  00003561  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003c89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  7a:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <APP_int>:
void carPass(void)
{
	allLedOff();
	LED_on(PORT_A,0);
	LED_on(PORT_B,2);
	TIMER_delay(1);
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	84 e4       	ldi	r24, 0x44	; 68
  86:	0e 94 69 01 	call	0x2d2	; 0x2d2 <BUTTOM_init>
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_int>
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_int>
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_int>
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_int>
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_int>
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_int>
  ba:	0e 94 45 03 	call	0x68a	; 0x68a <interrupt_int>
  be:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_init>
  c2:	08 95       	ret

000000c4 <allLedOff>:
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_off>
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_off>
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_off>
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	82 e4       	ldi	r24, 0x42	; 66
  e0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_off>
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_off>
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_off>
  f4:	08 95       	ret

000000f6 <APP_start>:
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	f9 f0       	breq	.+62     	; 0x13c <APP_start+0x46>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	09 f4       	brne	.+2      	; 0x104 <APP_start+0xe>
 102:	43 c0       	rjmp	.+134    	; 0x18a <APP_start+0x94>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	b9 f7       	brne	.-18     	; 0xf6 <APP_start>
 108:	0e 94 62 00 	call	0xc4	; 0xc4 <allLedOff>
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	82 e4       	ldi	r24, 0x42	; 66
 118:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TIMER_delay>
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	21 f4       	brne	.+8      	; 0x134 <APP_start+0x3e>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 132:	e1 cf       	rjmp	.-62     	; 0xf6 <APP_start>
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	dd cf       	rjmp	.-70     	; 0xf6 <APP_start>
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <allLedOff>
 140:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TIMER_set>
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	13 c0       	rjmp	.+38     	; 0x16e <APP_start+0x78>
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14c:	84 30       	cpi	r24, 0x04	; 4
 14e:	89 f0       	breq	.+34     	; 0x172 <APP_start+0x7c>
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_toggle>
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	82 e4       	ldi	r24, 0x42	; 66
 15c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_toggle>
 160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <ReadFlag>
 164:	89 2b       	or	r24, r25
 166:	e1 f3       	breq	.-8      	; 0x160 <APP_start+0x6a>
 168:	0e 94 73 03 	call	0x6e6	; 0x6e6 <FLAG_set>
 16c:	cf 5f       	subi	r28, 0xFF	; 255
 16e:	c4 31       	cpi	r28, 0x14	; 20
 170:	58 f3       	brcs	.-42     	; 0x148 <APP_start+0x52>
 172:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	21 f4       	brne	.+8      	; 0x182 <APP_start+0x8c>
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	ba cf       	rjmp	.-140    	; 0xf6 <APP_start>
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	b6 cf       	rjmp	.-148    	; 0xf6 <APP_start>
 18a:	0e 94 62 00 	call	0xc4	; 0xc4 <allLedOff>
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	82 e4       	ldi	r24, 0x42	; 66
 19a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TIMER_delay>
 1a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1aa:	84 30       	cpi	r24, 0x04	; 4
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <APP_start+0xc0>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	a0 cf       	rjmp	.-192    	; 0xf6 <APP_start>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	9c cf       	rjmp	.-200    	; 0xf6 <APP_start>

000001be <manPass>:
}

void manPass(void)
{
	allLedOff();
 1be:	0e 94 62 00 	call	0xc4	; 0xc4 <allLedOff>
	LED_on(PORT_A,2);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
	LED_on(PORT_B,0);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e4       	ldi	r24, 0x42	; 66
 1ce:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
	TIMER_delay(1);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TIMER_delay>
 1d8:	08 95       	ret

000001da <carWait>:
}


void carWait(void)
{
 1da:	cf 93       	push	r28
	allLedOff();
 1dc:	0e 94 62 00 	call	0xc4	; 0xc4 <allLedOff>
	LED_on(PORT_B,0);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
	uint8_t i =0;
	TIMER_set();
 1e8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TIMER_set>

void carWait(void)
{
	allLedOff();
	LED_on(PORT_B,0);
	uint8_t i =0;
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
	TIMER_set();
	while(i<20)//20
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <carWait+0x34>
	{
		LED_toggle(PORT_A,1);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_toggle>
		LED_toggle(PORT_B,1);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_toggle>
		while(ReadFlag()==0);
 200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <ReadFlag>
 204:	89 2b       	or	r24, r25
 206:	e1 f3       	breq	.-8      	; 0x200 <carWait+0x26>
		FLAG_set();
 208:	0e 94 73 03 	call	0x6e6	; 0x6e6 <FLAG_set>
		i++;
 20c:	cf 5f       	subi	r28, 0xFF	; 255
{
	allLedOff();
	LED_on(PORT_B,0);
	uint8_t i =0;
	TIMER_set();
	while(i<20)//20
 20e:	c4 31       	cpi	r28, 0x14	; 20
 210:	78 f3       	brcs	.-34     	; 0x1f0 <carWait+0x16>
		LED_toggle(PORT_B,1);
		while(ReadFlag()==0);
		FLAG_set();
		i++;
	}
}
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <manWait>:

void manWait(void)
{
 216:	cf 93       	push	r28
	allLedOff();
 218:	0e 94 62 00 	call	0xc4	; 0xc4 <allLedOff>
	LED_on(PORT_B,2);
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	82 e4       	ldi	r24, 0x42	; 66
 220:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_on>
	uint8_t i =0;
	TIMER_set();
 224:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TIMER_set>

void manWait(void)
{
	allLedOff();
	LED_on(PORT_B,2);
	uint8_t i =0;
 228:	c0 e0       	ldi	r28, 0x00	; 0
	TIMER_set();
		while(i<20)//20
 22a:	0f c0       	rjmp	.+30     	; 0x24a <manWait+0x34>
		{
			LED_toggle(PORT_A,1);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_toggle>
			LED_toggle(PORT_B,1);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	82 e4       	ldi	r24, 0x42	; 66
 238:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_toggle>
			while(ReadFlag()==0);
 23c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <ReadFlag>
 240:	89 2b       	or	r24, r25
 242:	e1 f3       	breq	.-8      	; 0x23c <manWait+0x26>
			FLAG_set();
 244:	0e 94 73 03 	call	0x6e6	; 0x6e6 <FLAG_set>
			i++;	
 248:	cf 5f       	subi	r28, 0xFF	; 255
{
	allLedOff();
	LED_on(PORT_B,2);
	uint8_t i =0;
	TIMER_set();
		while(i<20)//20
 24a:	c4 31       	cpi	r28, 0x14	; 20
 24c:	78 f3       	brcs	.-34     	; 0x22c <manWait+0x16>
			LED_toggle(PORT_B,1);
			while(ReadFlag()==0);
			FLAG_set();
			i++;	
		}	
}
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <__vector_1>:
	}	
	}
}

ISR(EXT_INT_0)
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	uint8_t redCarState;
	DIO_read(PORT_A,2,&redCarState);
 27e:	ae 01       	movw	r20, r28
 280:	4f 5f       	subi	r20, 0xFF	; 255
 282:	5f 4f       	sbci	r21, 0xFF	; 255
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	81 e4       	ldi	r24, 0x41	; 65
 288:	0e 94 d6 02 	call	0x5ac	; 0x5ac <DIO_read>
	if (redCarState == 1)
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	19 f4       	brne	.+6      	; 0x298 <__vector_1+0x46>
	{
		manPass();
 292:	0e 94 df 00 	call	0x1be	; 0x1be <manPass>
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <__vector_1+0x4e>
	}
	else
	{
		manWait();
 298:	0e 94 0b 01 	call	0x216	; 0x216 <manWait>
		manPass();
 29c:	0e 94 df 00 	call	0x1be	; 0x1be <manPass>
	}
	carWait();
 2a0:	0e 94 ed 00 	call	0x1da	; 0x1da <carWait>
	state = 4;
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <BUTTOM_init>:
#include "BUTTON.h"


int BUTTOM_init(uint8_t buttomPort,uint8_t buttomPin)
{
	return DIO_int(buttomPort,buttomPin,IN);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_int>
}
 2d8:	08 95       	ret

000002da <LED_int>:

#include "LED.h"

int LED_int(uint8_t ledPort ,uint8_t ledPin)
{
	return DIO_int(ledPort,ledPin,OUT);
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_int>
}
 2e0:	08 95       	ret

000002e2 <LED_on>:
int LED_on(uint8_t ledPort ,uint8_t ledPin)
{
	return DIO_write(ledPort,ledPin,HIGH);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write>
}
 2e8:	08 95       	ret

000002ea <LED_off>:
int LED_off(uint8_t ledPort ,uint8_t ledPin)
{
	return DIO_write(ledPort,ledPin,LOW);
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write>
}
 2f0:	08 95       	ret

000002f2 <LED_toggle>:
int LED_toggle(uint8_t ledPort ,uint8_t ledPin)
{
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	1f 92       	push	r1
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	18 2f       	mov	r17, r24
 302:	06 2f       	mov	r16, r22
	uint8_t x;
	DIO_read(ledPort,ledPin,&x);
 304:	ae 01       	movw	r20, r28
 306:	4f 5f       	subi	r20, 0xFF	; 255
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <DIO_read>
	if (x==1)
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	31 f4       	brne	.+12     	; 0x320 <LED_toggle+0x2e>
	{
		return DIO_write(ledPort,ledPin,LOW);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	60 2f       	mov	r22, r16
 318:	81 2f       	mov	r24, r17
 31a:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write>
 31e:	05 c0       	rjmp	.+10     	; 0x32a <LED_toggle+0x38>
	}
	else
	{
		return DIO_write(ledPort,ledPin,HIGH);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	60 2f       	mov	r22, r16
 324:	81 2f       	mov	r24, r17
 326:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write>
	}
 32a:	0f 90       	pop	r0
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <main>:

#include "APP/APP.h"
int main(void)
{

  APP_int();
 336:	0e 94 41 00 	call	0x82	; 0x82 <APP_int>
  APP_start();
 33a:	0e 94 7b 00 	call	0xf6	; 0xf6 <APP_start>

}
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <DIO_int>:



int DIO_int(uint8_t portNumber,uint8_t pinNumber , uint8_t direction)
{
	switch(portNumber)
 344:	82 34       	cpi	r24, 0x42	; 66
 346:	59 f1       	breq	.+86     	; 0x39e <DIO_int+0x5a>
 348:	18 f4       	brcc	.+6      	; 0x350 <DIO_int+0xc>
 34a:	81 34       	cpi	r24, 0x41	; 65
 34c:	41 f0       	breq	.+16     	; 0x35e <DIO_int+0x1a>
 34e:	85 c0       	rjmp	.+266    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 350:	83 34       	cpi	r24, 0x43	; 67
 352:	09 f4       	brne	.+2      	; 0x356 <DIO_int+0x12>
 354:	44 c0       	rjmp	.+136    	; 0x3de <DIO_int+0x9a>
 356:	84 34       	cpi	r24, 0x44	; 68
 358:	09 f4       	brne	.+2      	; 0x35c <DIO_int+0x18>
 35a:	60 c0       	rjmp	.+192    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 35c:	7e c0       	rjmp	.+252    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	{
		case PORT_A:
		if (direction == IN) // input state
 35e:	41 11       	cpse	r20, r1
 360:	0e c0       	rjmp	.+28     	; 0x37e <DIO_int+0x3a>
		{
			DDRA &=~(1<<pinNumber);
 362:	2a b3       	in	r18, 0x1a	; 26
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_int+0x2a>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_int+0x26>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8a bb       	out	0x1a, r24	; 26
			return OK;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	08 95       	ret
		}
		else if (direction == OUT) // output state
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_int+0x40>
 382:	6e c0       	rjmp	.+220    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		{
			DDRA |=(1<<pinNumber);
 384:	2a b3       	in	r18, 0x1a	; 26
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_int+0x4c>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_int+0x48>
 394:	82 2b       	or	r24, r18
 396:	8a bb       	out	0x1a, r24	; 26
			return 0 ;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	08 95       	ret
		
		
		break;
		
		case PORT_B:
		if (direction == IN) // input state
 39e:	41 11       	cpse	r20, r1
 3a0:	0e c0       	rjmp	.+28     	; 0x3be <DIO_int+0x7a>
		{
			DDRB &=~(1<<pinNumber);
 3a2:	27 b3       	in	r18, 0x17	; 23
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_int+0x6a>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_int+0x66>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	87 bb       	out	0x17, r24	; 23
			return OK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	08 95       	ret
		}
		else if (direction == OUT) // output state
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_int+0x80>
 3c2:	51 c0       	rjmp	.+162    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		{
			DDRB |=(1<<pinNumber);
 3c4:	27 b3       	in	r18, 0x17	; 23
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_int+0x8c>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_int+0x88>
 3d4:	82 2b       	or	r24, r18
 3d6:	87 bb       	out	0x17, r24	; 23
			return OK;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	08 95       	ret
		}
		break;
		
		case PORT_C:
		
		if (direction == IN) // input state
 3de:	41 11       	cpse	r20, r1
 3e0:	0e c0       	rjmp	.+28     	; 0x3fe <DIO_int+0xba>
		{
			DDRC &=~(1<<pinNumber);
 3e2:	24 b3       	in	r18, 0x14	; 20
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_int+0xaa>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_int+0xa6>
 3f2:	80 95       	com	r24
 3f4:	82 23       	and	r24, r18
 3f6:	84 bb       	out	0x14, r24	; 20
			return OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	08 95       	ret
		}
		else if (direction == OUT) // output state
 3fe:	41 30       	cpi	r20, 0x01	; 1
 400:	a9 f5       	brne	.+106    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		{
			DDRC |=(1<<pinNumber);
 402:	24 b3       	in	r18, 0x14	; 20
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	82 2b       	or	r24, r18
 414:	84 bb       	out	0x14, r24	; 20
			return OK;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	08 95       	ret
		}
		
		break;
		
		case PORT_D:
		if (direction == IN) // input state
 41c:	41 11       	cpse	r20, r1
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		{
			DDRD &=~(1<<pinNumber);
 420:	21 b3       	in	r18, 0x11	; 17
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	81 bb       	out	0x11, r24	; 17
			return OK;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	08 95       	ret
		}
		else if (direction == OUT) // output state
 43c:	41 30       	cpi	r20, 0x01	; 1
 43e:	c9 f4       	brne	.+50     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		{
			DDRD |=(1<<pinNumber);
 440:	21 b3       	in	r18, 0x11	; 17
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	82 2b       	or	r24, r18
 452:	81 bb       	out	0x11, r24	; 17
			return OK;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	08 95       	ret
		}
		
		break;
		
		default:
		return ERORR;
 45a:	84 e9       	ldi	r24, 0x94	; 148
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	08 95       	ret
			return 0 ;
			
		}
		else
		{
			return ERORR;
 460:	84 e9       	ldi	r24, 0x94	; 148
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	08 95       	ret
			DDRB |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 466:	84 e9       	ldi	r24, 0x94	; 148
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	08 95       	ret
			DDRC |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 46c:	84 e9       	ldi	r24, 0x94	; 148
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	08 95       	ret
			DDRD |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 472:	84 e9       	ldi	r24, 0x94	; 148
 474:	91 e0       	ldi	r25, 0x01	; 1
		
	}
	
	
	
}
 476:	08 95       	ret

00000478 <DIO_write>:

int DIO_write(uint8_t portNumber,uint8_t pinNumber , uint8_t value)
{
	
	switch(portNumber)
 478:	82 34       	cpi	r24, 0x42	; 66
 47a:	59 f1       	breq	.+86     	; 0x4d2 <DIO_write+0x5a>
 47c:	18 f4       	brcc	.+6      	; 0x484 <DIO_write+0xc>
 47e:	81 34       	cpi	r24, 0x41	; 65
 480:	41 f0       	breq	.+16     	; 0x492 <DIO_write+0x1a>
 482:	85 c0       	rjmp	.+266    	; 0x58e <DIO_write+0x116>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	09 f4       	brne	.+2      	; 0x48a <DIO_write+0x12>
 488:	44 c0       	rjmp	.+136    	; 0x512 <DIO_write+0x9a>
 48a:	84 34       	cpi	r24, 0x44	; 68
 48c:	09 f4       	brne	.+2      	; 0x490 <DIO_write+0x18>
 48e:	60 c0       	rjmp	.+192    	; 0x550 <DIO_write+0xd8>
 490:	7e c0       	rjmp	.+252    	; 0x58e <DIO_write+0x116>
	{
		case PORT_A:
		if (value == LOW) //
 492:	41 11       	cpse	r20, r1
 494:	0e c0       	rjmp	.+28     	; 0x4b2 <DIO_write+0x3a>
		{
			PORTA &=~(1<<pinNumber);
 496:	2b b3       	in	r18, 0x1b	; 27
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_write+0x2a>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_write+0x26>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	8b bb       	out	0x1b, r24	; 27
			return OK;
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	08 95       	ret
		}
		else if (value == HIGH) // output state
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <DIO_write+0x40>
 4b6:	6e c0       	rjmp	.+220    	; 0x594 <DIO_write+0x11c>
		{
			PORTA |=(1<<pinNumber);
 4b8:	2b b3       	in	r18, 0x1b	; 27
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_write+0x4c>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_write+0x48>
 4c8:	82 2b       	or	r24, r18
 4ca:	8b bb       	out	0x1b, r24	; 27
			return OK;
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	08 95       	ret
		
		
		break;
		
		case PORT_B:
		if (value == LOW) // input state
 4d2:	41 11       	cpse	r20, r1
 4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <DIO_write+0x7a>
		{
			PORTB &=~(1<<pinNumber);
 4d6:	28 b3       	in	r18, 0x18	; 24
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_write+0x6a>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_write+0x66>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	88 bb       	out	0x18, r24	; 24
			return OK;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	08 95       	ret
		}
		else if (value == HIGH) // output state
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <DIO_write+0x80>
 4f6:	51 c0       	rjmp	.+162    	; 0x59a <DIO_write+0x122>
		{
			PORTB |=(1<<pinNumber);
 4f8:	28 b3       	in	r18, 0x18	; 24
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0x8c>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x88>
 508:	82 2b       	or	r24, r18
 50a:	88 bb       	out	0x18, r24	; 24
			return OK;
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	08 95       	ret
		}
		break;
		
		case PORT_C:
		
		if (value == LOW) // input state
 512:	41 11       	cpse	r20, r1
 514:	0e c0       	rjmp	.+28     	; 0x532 <DIO_write+0xba>
		{
			PORTC &=~(1<<pinNumber);
 516:	25 b3       	in	r18, 0x15	; 21
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_write+0xaa>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_write+0xa6>
 526:	80 95       	com	r24
 528:	82 23       	and	r24, r18
 52a:	85 bb       	out	0x15, r24	; 21
			return OK;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	08 95       	ret
		}
		else if (value == HIGH) // output state
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	a9 f5       	brne	.+106    	; 0x5a0 <DIO_write+0x128>
		{
			PORTC |=(1<<pinNumber);
 536:	25 b3       	in	r18, 0x15	; 21
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_write+0xca>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_write+0xc6>
 546:	82 2b       	or	r24, r18
 548:	85 bb       	out	0x15, r24	; 21
			return OK;
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	08 95       	ret
		}
		
		break;
		
		case PORT_D:
		if (value == LOW) // input state
 550:	41 11       	cpse	r20, r1
 552:	0e c0       	rjmp	.+28     	; 0x570 <DIO_write+0xf8>
		{
			PORTD &=~(1<<pinNumber);
 554:	22 b3       	in	r18, 0x12	; 18
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_write+0xe8>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_write+0xe4>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	82 bb       	out	0x12, r24	; 18
			return OK;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	08 95       	ret
		}
		else if (value == HIGH) // output state
 570:	41 30       	cpi	r20, 0x01	; 1
 572:	c9 f4       	brne	.+50     	; 0x5a6 <DIO_write+0x12e>
		{
			PORTD |=(1<<pinNumber);
 574:	22 b3       	in	r18, 0x12	; 18
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_write+0x108>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_write+0x104>
 584:	82 2b       	or	r24, r18
 586:	82 bb       	out	0x12, r24	; 18
			return OK;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	08 95       	ret
			return ERORR;
		}
		
		break;
		default:
		return ERORR;
 58e:	84 e9       	ldi	r24, 0x94	; 148
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	08 95       	ret
			PORTA |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 594:	84 e9       	ldi	r24, 0x94	; 148
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	08 95       	ret
			PORTB |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 59a:	84 e9       	ldi	r24, 0x94	; 148
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	08 95       	ret
			PORTC |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 5a0:	84 e9       	ldi	r24, 0x94	; 148
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	08 95       	ret
			PORTD |=(1<<pinNumber);
			return OK;
		}
		else
		{
			return ERORR;
 5a6:	84 e9       	ldi	r24, 0x94	; 148
 5a8:	91 e0       	ldi	r25, 0x01	; 1
		return ERORR;
		break;
		
	}
	
}
 5aa:	08 95       	ret

000005ac <DIO_read>:
int DIO_read(uint8_t portNumber,uint8_t pinNumber , uint8_t *value)
{
	switch(portNumber)
 5ac:	82 34       	cpi	r24, 0x42	; 66
 5ae:	11 f1       	breq	.+68     	; 0x5f4 <DIO_read+0x48>
 5b0:	18 f4       	brcc	.+6      	; 0x5b8 <DIO_read+0xc>
 5b2:	81 34       	cpi	r24, 0x41	; 65
 5b4:	39 f0       	breq	.+14     	; 0x5c4 <DIO_read+0x18>
 5b6:	66 c0       	rjmp	.+204    	; 0x684 <DIO_read+0xd8>
 5b8:	83 34       	cpi	r24, 0x43	; 67
 5ba:	a1 f1       	breq	.+104    	; 0x624 <DIO_read+0x78>
 5bc:	84 34       	cpi	r24, 0x44	; 68
 5be:	09 f4       	brne	.+2      	; 0x5c2 <DIO_read+0x16>
 5c0:	49 c0       	rjmp	.+146    	; 0x654 <DIO_read+0xa8>
 5c2:	60 c0       	rjmp	.+192    	; 0x684 <DIO_read+0xd8>
	{
		case PORT_A:
		*value=(PINA&(1<<pinNumber))>>pinNumber;
 5c4:	79 b3       	in	r23, 0x19	; 25
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	9c 01       	movw	r18, r24
 5cc:	06 2e       	mov	r0, r22
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_read+0x28>
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_read+0x24>
 5d8:	87 2f       	mov	r24, r23
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	82 23       	and	r24, r18
 5de:	93 23       	and	r25, r19
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_read+0x3a>
 5e2:	95 95       	asr	r25
 5e4:	87 95       	ror	r24
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_read+0x36>
 5ea:	fa 01       	movw	r30, r20
 5ec:	80 83       	st	Z, r24
		return OK;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	08 95       	ret
		break;
		
		case PORT_B:
		*value=(PINB&(1<<pinNumber))>>pinNumber;
 5f4:	76 b3       	in	r23, 0x16	; 22
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	9c 01       	movw	r18, r24
 5fc:	06 2e       	mov	r0, r22
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_read+0x58>
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_read+0x54>
 608:	87 2f       	mov	r24, r23
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	82 23       	and	r24, r18
 60e:	93 23       	and	r25, r19
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_read+0x6a>
 612:	95 95       	asr	r25
 614:	87 95       	ror	r24
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_read+0x66>
 61a:	fa 01       	movw	r30, r20
 61c:	80 83       	st	Z, r24
		return OK;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	08 95       	ret
		break;
		
		case PORT_C:
		*value=(PINC&(1<<pinNumber))>>pinNumber;
 624:	73 b3       	in	r23, 0x13	; 19
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	9c 01       	movw	r18, r24
 62c:	06 2e       	mov	r0, r22
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_read+0x88>
 630:	22 0f       	add	r18, r18
 632:	33 1f       	adc	r19, r19
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_read+0x84>
 638:	87 2f       	mov	r24, r23
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	82 23       	and	r24, r18
 63e:	93 23       	and	r25, r19
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_read+0x9a>
 642:	95 95       	asr	r25
 644:	87 95       	ror	r24
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_read+0x96>
 64a:	fa 01       	movw	r30, r20
 64c:	80 83       	st	Z, r24
		return OK;
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	08 95       	ret
		break;
		
		case PORT_D:
		*value=(PIND&(1<<pinNumber))>>pinNumber;
 654:	70 b3       	in	r23, 0x10	; 16
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	9c 01       	movw	r18, r24
 65c:	06 2e       	mov	r0, r22
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_read+0xb8>
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	0a 94       	dec	r0
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_read+0xb4>
 668:	87 2f       	mov	r24, r23
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	82 23       	and	r24, r18
 66e:	93 23       	and	r25, r19
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_read+0xca>
 672:	95 95       	asr	r25
 674:	87 95       	ror	r24
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_read+0xc6>
 67a:	fa 01       	movw	r30, r20
 67c:	80 83       	st	Z, r24
		return OK;
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	08 95       	ret
		break;
		
		default:
		return ERORR;
 684:	84 e9       	ldi	r24, 0x94	; 148
 686:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}
	
}
 688:	08 95       	ret

0000068a <interrupt_int>:

#include "INTERRUPT.h"

int interrupt_int(void)
{
	sei();
 68a:	78 94       	sei
	MCUCR |=(1<<0)|(1<<1);
 68c:	85 b7       	in	r24, 0x35	; 53
 68e:	83 60       	ori	r24, 0x03	; 3
 690:	85 bf       	out	0x35, r24	; 53
	GICR |=(1<<6);
 692:	8b b7       	in	r24, 0x3b	; 59
 694:	80 64       	ori	r24, 0x40	; 64
 696:	8b bf       	out	0x3b, r24	; 59
	return OK;
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	08 95       	ret

0000069e <TIMER_init>:
#include "TIMER.h"


int TIMER_init(void)
{
	TCCR0 =0x00; //normal mode
 69e:	13 be       	out	0x33, r1	; 51
	TCNT0 =0x00; //set timer int value 0
 6a0:	12 be       	out	0x32, r1	; 50
	return OK;
	
}
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	08 95       	ret

000006a8 <TIMER_delay>:
int TIMER_delay(uint8_t breakDelay)
{
	uint8_t i =0;
	TCNT0|=(1<<2)|(1<<3);
 6a8:	92 b7       	in	r25, 0x32	; 50
 6aa:	9c 60       	ori	r25, 0x0C	; 12
 6ac:	92 bf       	out	0x32, r25	; 50
	TCCR0|=(1<<2)|(1<<0);
 6ae:	93 b7       	in	r25, 0x33	; 51
 6b0:	95 60       	ori	r25, 0x05	; 5
 6b2:	93 bf       	out	0x33, r25	; 51
	return OK;
	
}
int TIMER_delay(uint8_t breakDelay)
{
	uint8_t i =0;
 6b4:	20 e0       	ldi	r18, 0x00	; 0
	TCNT0|=(1<<2)|(1<<3);
	TCCR0|=(1<<2)|(1<<0);
	//TCCR0|=(1<<2);
	while(i<20)//20
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <TIMER_delay+0x22>
	{
		if (breakDelay == 4) {break;}
 6b8:	84 30       	cpi	r24, 0x04	; 4
 6ba:	49 f0       	breq	.+18     	; 0x6ce <TIMER_delay+0x26>
		while((TIFR&(1<<0))==0);
 6bc:	08 b6       	in	r0, 0x38	; 56
 6be:	00 fe       	sbrs	r0, 0
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <TIMER_delay+0x14>
		TIFR|=(1<<0);
 6c2:	98 b7       	in	r25, 0x38	; 56
 6c4:	91 60       	ori	r25, 0x01	; 1
 6c6:	98 bf       	out	0x38, r25	; 56
		i++;
 6c8:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t i =0;
	TCNT0|=(1<<2)|(1<<3);
	TCCR0|=(1<<2)|(1<<0);
	//TCCR0|=(1<<2);
	while(i<20)//20
 6ca:	24 31       	cpi	r18, 0x14	; 20
 6cc:	a8 f3       	brcs	.-22     	; 0x6b8 <TIMER_delay+0x10>
		TIFR|=(1<<0);
		i++;
		
	}
	return OK;
}
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <TIMER_set>:

int TIMER_set(void)
{
	TCNT0|=(1<<2)|(1<<3);
 6d4:	82 b7       	in	r24, 0x32	; 50
 6d6:	8c 60       	ori	r24, 0x0C	; 12
 6d8:	82 bf       	out	0x32, r24	; 50
	TCCR0|=(1<<2)|(1<<0);
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	85 60       	ori	r24, 0x05	; 5
 6de:	83 bf       	out	0x33, r24	; 51
	return OK;
}
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	08 95       	ret

000006e6 <FLAG_set>:

int FLAG_set(void)
{
	TIFR|=(1<<0);
 6e6:	88 b7       	in	r24, 0x38	; 56
 6e8:	81 60       	ori	r24, 0x01	; 1
 6ea:	88 bf       	out	0x38, r24	; 56
	return OK;
}
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	08 95       	ret

000006f2 <ReadFlag>:

int ReadFlag(void)
{
return (TIFR&(1<<0));
 6f2:	88 b7       	in	r24, 0x38	; 56
}
 6f4:	81 70       	andi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	08 95       	ret

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
